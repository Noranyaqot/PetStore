{
	"info": {
		"_postman_id": "edb0f660-f009-4f3c-8092-ea7a7f6969d0",
		"name": "PetStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31090263",
		"_collection_link": "https://www.postman.com/winter-star-46810/workspace/petstore/collection/31090263-edb0f660-f009-4f3c-8092-ea7a7f6969d0?action=share&source=collection_link&creator=31090263"
	},
	"item": [
		{
			"name": "1.Pet",
			"item": [
				{
					"name": "1.1AddNewPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('PetID',JSON.parse(responseBody).id);\r",
									"// check ID in response schema\r",
									"pm.test('[1.Pet].[1.1AddNewPet].1.Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].2.Check photoUrls an array',function(){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.be.an('array');\r",
									"\r",
									"})    \r",
									"pm.test('[1.Pet].[1.1AddNewPet].3.Check tags an array',function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].4.Check response Schema contain property id', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('id');  \r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].5.Check response Schema contain property category', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('category');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].6.Check response Schema contain property tags', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('tags');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].7.Check response Schema contain property photoUrls ', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('photoUrls');\r",
									"})\r",
									"pm.test('[1.Pet].[1.1AddNewPet].8.Check response Schema contain property status', function () {\r",
									"     pm.expect(JSON.parse(responseBody)).to.have.property('status');\r",
									"})\r",
									"\r",
									"//Check pet id\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].9.Check pet id is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).id).to.be.a('number');\r",
									"});    \r",
									"\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].10.Check pet id greaterThan 13  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.greaterThan(13);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].11.Check pet id not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"//Check id\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].12.Check ID not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null);\r",
									"});    \r",
									"\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].13.Check ID not undefined\",function (){\r",
									"        pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined);\r",
									"});\r",
									"\r",
									"//Check name \r",
									"pm.test('[1.Pet].[1.1AddNewPet].14.Check Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].15.Check Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].16.Check Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].17.Check Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].18.Check Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"// Check Category\r",
									"pm.test('[1.Pet].[1.1AddNewPet].19.Check response category contain property name',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].20.Check response category contain property id',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].21.Check category will be an object',function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.be.an('object')\r",
									"})\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].22.Check category id not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].23.Check category id greater than 2', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id.toString().length).to.be.greaterThan(2);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].24.Check category id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.be.within(100 ,1000);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].25.Check category id to be a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.be.a('Number');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].26.Check category id not contain letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].27.Check Category Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].28.Check Category Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].29.Check Category Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).category.name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].30.Check Category Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].31.Check Category Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"\r",
									"//Check tags and name\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].32.Check response tags contain property name', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].33.Check response tags contain property id', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].34.Check tags an object',function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.be.an('object')\r",
									"\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].35.Check tags id not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].36.Check tags id greaterthan 2 ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id.toString().length).to.be.greaterThan(2);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].37.Check tags id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.within(100 ,1000);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].38.Check tags id to be a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.a('Number');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].39.Check tags id to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].40.Check tags Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].41.Check tags Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].42.Check tags Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).tags[0].name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].43.Check tags Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].44.Check tags Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"\r",
									"//Check photo URL\r",
									"pm.test('[1.Pet].[1.1AddNewPet].45.Check PhotoUrl is URL', function (){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls[0]).to.match(/^https?:\\/\\/\\S+$/);\r",
									"});\r",
									"\r",
									"//Check status\r",
									"pm.test('[1.Pet].[1.1AddNewPet].46.Check status not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].47.Check status not contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(Number);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].48.Check status response', function (){\r",
									"  pm.expect(JSON.parse(responseBody).status).to.be.oneOf(['sold', 'available', 'pending']);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.1AddNewPet].49.Check status to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).status)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('name',JSON.parse(request.data).name)\r",
									"pm.collectionVariables.set('status',JSON.parse(request.data).status)\r",
									"pm.environment.set('orderpetid',JSON.parse(request.data).id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateID() {\r",
									"  return Math.floor(Math.random() * (1000 - 100 + 1) + 100);\r",
									"}\r",
									"pm.collectionVariables.set(\"CTID\",generateID())\r",
									"pm.collectionVariables.set(\"TAGID\",generateID())\r",
									"\r",
									"function randomName() {\r",
									"   var nameLength = Math.floor(Math.random() * 3) + 8; // \r",
									"   var name = '';\r",
									"   var characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"\r",
									"   for (var i = 0; i < nameLength; i++) {\r",
									"       name += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"   }\r",
									"\r",
									"   return name;\r",
									"}\r",
									"pm.collectionVariables.set(\"CTNAME\",randomName())\r",
									"pm.collectionVariables.set(\"PHNAME\",randomName())\r",
									"pm.collectionVariables.set(\"TAGNAME\",randomName())\r",
									"\r",
									"function randomStatus() {\r",
									"    var status = ['available', 'sold' , 'pending'];\r",
									"    var randomIndex = Math.floor(Math.random() * status.length);\r",
									"\r",
									"    return status[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"status\",randomStatus())\r",
									"\r",
									"function randomPhotoUrl() {\r",
									"    var photoUrls = [\r",
									"        'https://i.imgur.com/Xz223S9.png',\r",
									"        'https://i.imgur.com/21CMPvD.png',\r",
									"        'https://i.imgur.com/pftwaw2.png',\r",
									"    ];\r",
									"    var randomIndex = Math.floor(Math.random() * photoUrls.length);\r",
									"\r",
									"    return photoUrls[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"rphoto\",randomPhotoUrl())\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{PetID}},\r\n  \"category\": {\r\n    \"id\": {{CTID}},\r\n    \"name\": \"{{CTNAME}}\"\r\n  },\r\n  \"name\": \"{{PHNAME}}\",\r\n  \"photoUrls\": [\r\n    \"{{rphoto}}\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{TAGID}},\r\n      \"name\": \"{{TAGNAME}}\"\r\n    }\r\n  ],\r\n  \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2UpdatePet(by id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"//Check response Schema\r",
									"pm.test('[1.2].[1.2 Update an existing pet].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"})\r",
									"pm.test('[1.2].[1.2 Update an existing pet].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"})\r",
									"pm.test('[1.2].[1.2 Update an existing pet].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"})\r",
									"//Check Message\r",
									"pm.test('[1.2].[1.2 Update an existing pet].4.Check message to contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/[0-9]/);\r",
									"});\r",
									"pm.test('[1.2].[1.2 Update an existing pet].5.Check message greaterThan 13  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message.length).to.be.greaterThan(13);\r",
									"})\r",
									"pm.test('[1.2].[1.2 Update an existing pet].6.Check message not contail letters  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.match(/[A-Za-z]/);\r",
									"})\r",
									"//Check response not null\r",
									"pm.test('[1.2].[1.2 Update an existing pet].7.Check code not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"});\r",
									"pm.test('[1.2].[1.2 Update an existing pet].8.Check type not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"});\r",
									"pm.test('[1.2].[1.2 Update an existing pet].9.Check message not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"});\r",
									"//Check Code\r",
									"pm.test('[1.2].[1.2 Update an existing pet].10.Check code to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomStringWithLetters(minLength, maxLength) {\r",
									"  const characterPool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"  const stringLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"  let randomString = '';\r",
									"\r",
									"  for (let i = 0; i < stringLength; i++) {\r",
									"    randomString += characterPool[Math.floor(Math.random() * characterPool.length)];\r",
									"  }\r",
									"  return randomString;\r",
									"}\r",
									"pm.collectionVariables.set(\"NameUpdate\", generateRandomStringWithLetters(8, 10));\r",
									" //Status*\r",
									"const stringArray = [\"available\", \"unavailable\" , \"Sold\"];\r",
									"const randomIndex = Math.floor(Math.random() * stringArray.length);\r",
									"pm.collectionVariables.set(\"StatusUpdate\",stringArray[randomIndex]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{NameUpdate}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{status_update}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{PetID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{PetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3UploadPetimage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response Schema\r",
									"pm.test('[1.pet].[1.3UploadPetimage].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"})\r",
									"pm.test('[1.pet].[1.3UploadPetimage].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"})\r",
									"pm.test('[1.pet].[1.3UploadPetimage].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"})\r",
									"\r",
									"//Check property not null---------------------------------------------------------------------------\r",
									"pm.test(\"[1.pet].[1.3UploadPetimage].4.Check Code not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).Code).to.not.equal(null);\r",
									"});    \r",
									"\r",
									"pm.test(\"[1.pet].[1.3UploadPetimage].5.Check type not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[1.pet].[1.3UploadPetimage].6.Check message not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"//Check Code contain number------------------------------------------------------------------------\r",
									"pm.test('[1.pet].[1.3UploadPetimage].7.Check code responseis  a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.a('Number');\r",
									"});\r",
									"\r",
									"pm.test('[1.pet].[1.3UploadPetimage].8.Check code not contain letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"//check type--------------------------------------------------------------------------------------------\r",
									"pm.test('[1.pet].[1.3UploadPetimage].9.Check type to be a string', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"//Check message-------------------------------------------------------------------------------------\r",
									"pm.test('[1.pet].[1.3UploadPetimage].10.Check message to be string', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "image/jpeg",
								"type": "text"
							},
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "string",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/Mona/Pictures/5-23.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{PetID}}/uploadImage",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{PetID}}",
								"uploadImage"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6FindByPetID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check Tags--------------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.6FindByPetID].01.Check response tags contain property name', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('name');\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].02.Check response tags contain property id', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('id');\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].03.Check tags an object',function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.be.an('object')\r",
									"\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].04.Check tags id not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.equal(null);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].05.Check tags id greaterthan 2 ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id.toString().length).to.be.greaterThan(2);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].06.Check tags id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.within(100 ,1000);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].07.Check tags id to be a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.a('Number');\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].08.Check tags id to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].09.Check tags Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.equal(null);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].10.Check tags Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name.length).to.be.within(8 ,10);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].11.Check tags Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).tags[0].name)).to.be.a('string');\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].12.Check tags Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.match(/[a-z]/);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].13.Check tags Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"\r",
									"//Check photourl---------------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.6FindByPetID].14.Check PhotoUrl is URL', function (){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls[0]).to.match(/^https?:\\/\\/\\S+$/);\r",
									"});\r",
									"\r",
									"// Check Status---------------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.6FindByPetID].15.Check status not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].16.Check status not contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(Number);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].17.Check status response', function (){\r",
									"  pm.expect(JSON.parse(responseBody).status).to.be.oneOf(['sold', 'available', 'pending']);\r",
									"});\r",
									"pm.test('[1.Pet].[1.6FindByPetID].18.Check status to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).status)).to.be.a('string');\r",
									"});\r",
									"\r",
									"//Check Category--------------------------------------------------------------------------------------\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].19.Check response category contain property name',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].20.Check response category contain property id',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].21.Check category will be an object',function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.be.an('object')\r",
									"})\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].22.Check category id not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].23.Check category id greater than 2', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id.toString().length).to.be.greaterThan(2);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].24.Check category id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.be.within(100 ,1000);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].25.Check category id to be a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.be.a('Number');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].26.Check category id not contain letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].27.Check Category Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].28.Check Category Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].29.Check Category Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).category.name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].30.Check Category Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.6FindByPetID].31.Check Category Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"//-------------------------------------------------------------------------------------------\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{PetID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{PetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4UpdateExistingPet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateID() {\r",
									"  return Math.floor(Math.random() * (1000 - 100 + 1) + 100);\r",
									"}\r",
									"pm.collectionVariables.set(\"CTID_update\",generateID())\r",
									"pm.collectionVariables.set(\"TAGID_update\",generateID())\r",
									"\r",
									"function randomStatus() {\r",
									"    var status = ['available', 'sold' , 'pending'];\r",
									"    var randomIndex = Math.floor(Math.random() * status.length);\r",
									"\r",
									"    return status[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"status_update\",randomStatus())\r",
									"\r",
									"function generateRandomName() {\r",
									"    var length = Math.floor(Math.random() * 3) + 8;\r",
									"    var result = '';\r",
									"    var characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    var charactersLength = characters.length;\r",
									"    for ( var i = 0; i < length; i++ ) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"pm.collectionVariables.set(\"CATName_update\", generateRandomName());\r",
									"pm.collectionVariables.set(\"TagName_update\", generateRandomName());\r",
									"pm.collectionVariables.set(\"DogName_update\", generateRandomName());\r",
									"\r",
									"function generateRandomPhotoUrl() {\r",
									"    var width = Math.floor(Math.random() * 1000) + 100;\r",
									"    var height = Math.floor(Math.random() * 1000) + 100;\r",
									"    var url = \"https://picsum.photos/\" + width + \"/\" + height;\r",
									"    return url;\r",
									"}\r",
									"pm.collectionVariables.set(\"URLS_update\", generateRandomPhotoUrl());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//check request body type-----------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].1.Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].2.Check photoUrls an array',function(){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.be.an('array');\r",
									"\r",
									"})    \r",
									"pm.test('[1.Pet].[1.4UpdatePet].3.Check tags an array',function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.be.an('array');\r",
									"});\r",
									"//check response body schema----------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].4.Check response Schema contain property id', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('id');  \r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].5.Check response Schema contain property category', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('category');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].6.Check response Schema contain property tags', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('tags');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].7.Check response Schema contain property photoUrls ', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('photoUrls');\r",
									"})\r",
									"pm.test('[1.Pet].[1.4UpdatePet].8.Check response Schema contain property status', function () {\r",
									"     pm.expect(JSON.parse(responseBody)).to.have.property('status');\r",
									"})\r",
									"//check pet id------------------------------------------------------------------------------------\r",
									"pm.test(\"[1.Pet].[1.4UpdatePet].9.Check pet id is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).id).to.be.a('number');\r",
									"});    \r",
									"\r",
									"pm.test(\"[1.Pet].[1.4UpdatePet].10.Check pet id greaterThan 13  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.greaterThan(13);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.Pet].[1.4UpdatePet].11.Check pet id not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check id---------------------------------------------------------------------------------------\r",
									"pm.test(\"[1.Pet].[1.4UpdatePet].12.Check ID not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null);\r",
									"});    \r",
									"\r",
									"pm.test(\"[1.Pet].[1.4UpdatePet].13.Check ID not undefined\",function (){\r",
									"        pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined);\r",
									"});\r",
									"//check name------------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].14.Check Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].15.Check Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].16.Check Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].17.Check Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].18.Check Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"//check category-------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].19.Check response category contain property name',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].20.Check response category contain property id',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].21.Check category will be an object',function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.be.an('object')\r",
									"})\r",
									"//check category id---------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].22.Check category id not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].23.Check category id greater than 2', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id.toString().length).to.be.greaterThan(2);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].24.Check category id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.be.within(100 ,1000);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].25.Check category id to be a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.be.a('Number');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].26.Check category id not contain letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check category name---------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].27.Check Category Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].28.Check Category Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].29.Check Category Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).category.name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].30.Check Category Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].31.Check Category Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"//check tags-------------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].32.Check response tags contain property name', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].33.Check response tags contain property id', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].34.Check tags an object',function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.be.an('object')\r",
									"\r",
									"});\r",
									"//check tags id-----------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].35.Check tags id not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].36.Check tags id greaterthan 2 ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id.toString().length).to.be.greaterThan(2);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].37.Check tags id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.within(100 ,1000);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].38.Check tags id to be a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.a('Number');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].39.Check tags id to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check tags name-----------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].40.Check tags Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].41.Check tags Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].42.Check tags Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).tags[0].name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].43.Check tags Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].44.Check tags Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"\r",
									"//check photo url---------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].45.Check PhotoUrl is URL', function (){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls[0]).to.match(/^https?:\\/\\/\\S+$/);\r",
									"});\r",
									"//check status-------------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.4UpdatePet].46.Check status not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].47.Check status not contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(Number);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].48.Check status response', function (){\r",
									"  pm.expect(JSON.parse(responseBody).status).to.be.oneOf(['sold', 'available', 'pending']);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.4UpdatePet].49.Check status to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).status)).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{PetID}},\r\n  \"category\": {\r\n    \"id\": {{CTID_update}},\r\n    \"name\": \"{{CATName_update}}\"\r\n  },\r\n  \"name\": \"{{DogName_update}}\",\r\n  \"photoUrls\": [\r\n    \"{{URLS_update}}\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{TAGID_update}},\r\n      \"name\": \"{{TagName_update}}\"\r\n    }\r\n  ],\r\n  \"status\": \"{{status_update}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5FindByStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//check response body type-----------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.1AddNewPet].1.Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('array');});\r",
									"//check response schema and is -------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.1AddNewPet].2.Check response Schema contain property id', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('id');  \r",
									"});\r",
									"\r",
									"pm.test(\"[1.Pet].[1.5FindbyStatus].3.Check ID not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null);\r",
									"});    \r",
									"//check name--------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.5FindbyStatus].4.Check Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('[1.Pet].[1.5FindbyStatus].5.Check Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.5FindbyStatus].5.Check Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.5FindbyStatus].6.Check Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"//check status---------------------------------------------------------------------------------\r",
									"pm.test('[1.Pet].[1.5FindbyStatus].7.Check status not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.5FindbyStatus].8.Check status not contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(Number);\r",
									"});\r",
									"\r",
									"pm.test('[1.Pet].[1.5FindbyStatus].9.Check status to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).status)).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet/findByStatus?status={{StatusUpdate}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "{{StatusUpdate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7Delete(ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"//Check response Schema--------------------------------------------------------------------------\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"})\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"})\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"})\r",
									"//Check Message-----------------------------------------------------------------------------------\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].4.Check message to contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/[0-9]/);\r",
									"});\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].5.Check message greaterThan 13  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message.length).to.be.greaterThan(13);\r",
									"})\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].6.Check message not contail letters  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.match(/[A-Za-z]/);\r",
									"})\r",
									"//Check response not null--------------------------------------------------------------------------\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].7.Check code not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"});\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].8.Check type not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"});\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].9.Check message not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"});\r",
									"//Check Code---------------------------------------------------------------------------------------\r",
									"pm.test('[1.pet].[1.7 Delete(ID)].10.Check code to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api_key",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{PetID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{PetID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2.User",
			"item": [
				{
					"name": "2.1AddNewOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('orderid',JSON.parse(request.data).id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//check respone body type------------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.1AddNewStore].1.Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');\r",
									"});\r",
									"//check respone body schema----------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.1AddNewStore].2.Check response Schema contain property id', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('id');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[1.1AddNewStore].3.Check response Schema contain petID', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('petId');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[1.1AddNewStore].4.Check response Schema contain property quantity', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('quantity');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[1.1AddNewStore].5.Check response Schema contain property shipdate', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('shipDate');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[1.1AddNewStore].6.Check response Schema contain property status', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('status');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[1.1AddNewStore].7.Check response Schema contain property complete', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('complete');  \r",
									"});\r",
									"//check pet id--------------------------------------------------------------------------------------\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].8.Check pet id is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).petId).to.be.a('number');\r",
									"});    \r",
									"\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].9.Check pet id greaterThan 13  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.be.greaterThan(13);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].10.Check pet id not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check id---------------------------------------------------------------------------------------------\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].11.Check id is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).id).to.be.a('number');\r",
									"});    \r",
									"\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].12.Check id greaterThan 13  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.greaterThan(13);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].13.Check id not contain letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check quantity--------------------------------------------------------------------------------------\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].14.Check quantity is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).quantity).to.be.a('number');\r",
									"});    \r",
									"\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].15.Check quantity equal 2 digits  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).quantity.toString()).to.match(/^\\d{2}$/);;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].16.Check quantity not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check response body not null-------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.1AddNewStore].17.Check ID not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].18.Check petId not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].19.Check quantity not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].20.Check shipDate not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].21.Check status not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[1.Pet].[1.1AddNewPet].22.Check complete not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.equal(null);\r",
									"}); \r",
									"//check status----------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.1AddNewStore].23.Check status not contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(Number);\r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[1.1AddNewStore].24.Check status response', function (){\r",
									"  pm.expect(JSON.parse(responseBody).status).to.be.oneOf(['sold', 'commingsoon', 'placed']);\r",
									"});\r",
									"\r",
									"//Check shipdate--------------------------------------------------------------------------------------\r",
									"\r",
									"function formatDateTime(dtStr) {\r",
									"  const dt = new Date(dtStr);\r",
									"  return dt.toISOString().substring(0, 10) + 'T00:00:00';\r",
									"}\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].25-Actual and Expected Results:Check shipDate value is \"+formatDateTime(JSON.parse(request.data).shipDate),function(){\r",
									"    pm.expect(formatDateTime(JSON.parse(request.data).shipDate)).to.be.equal(formatDateTime(JSON.parse(responseBody).shipDate));\r",
									"});\r",
									"\r",
									"//check complete true or false------------------------------------------------------------------------\r",
									"\r",
									"pm.test(\"[2-store].[2.1 place order for a pet].26-Check Complete true or false\" , function(){\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.be.a('boolean')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateQuantity() {\r",
									"  return Math.floor(Math.random() * (100 - 1 + 1)) + 1;\r",
									"}\r",
									"pm.collectionVariables.set(\"quantity\", generateQuantity());\r",
									"\r",
									"function generateRandomDate() {\r",
									"  const minDate = new Date('2023-01-01');\r",
									"  const maxDate = new Date('2030-11-21');\r",
									"  const randomDate = new Date(minDate.getTime() + Math.random() * (maxDate.getTime() - minDate.getTime()));\r",
									"  return randomDate.toISOString();\r",
									"}\r",
									"const randomDate = generateRandomDate();\r",
									"pm.collectionVariables.set(\"shipdate\", generateRandomDate())\r",
									"\r",
									"function randomStatus() {\r",
									"    var status = ['placed', 'sold' , 'commingsoon' ];\r",
									"    var randomIndex = Math.floor(Math.random() * status.length);\r",
									"\r",
									"    return status[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"orderstatus\",randomStatus())\r",
									"\r",
									"function generateRandomBoolean() {\r",
									"  return Math.random() >= 0.5;\r",
									"}\r",
									"const randomBoolean = generateRandomBoolean();\r",
									"pm.collectionVariables.set(\"Complete\", generateRandomBoolean())\r",
									"\r",
									"function generateID() {\r",
									"  const min = Math.pow(10, 18);\r",
									"  const max = Math.pow(10, 19) - 1;\r",
									"  const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"  const randomID = randomNumber.toString().padStart(19, '0');\r",
									"  return randomID;\r",
									"}\r",
									"pm.collectionVariables.set(\"orderid\",generateID())\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{orderid}},\r\n  \"petId\": {{orderpetid}},\r\n  \"quantity\": {{quantity}},\r\n  \"shipDate\": \"{{shipdate}}\",\r\n  \"status\": \"{{orderstatus}}\",\r\n  \"complete\": {{Complete}}\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v2/store/order/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2GetOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//check response body type-------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[2.2GetOrder].1.Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');\r",
									"});\r",
									"//check response schema property--------------------------------------------------------------------\r",
									"pm.test('[2.Store].[2.2GetOrder].2.Check response Schema contain property id', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('id');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[2.2GetOrder].3.Check response Schema contain petID', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('petId');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[2.2GetOrder].4.Check response Schema contain property quantity', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('quantity');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[2.2GetOrder].5.Check response Schema contain property shipdate', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('shipDate');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[2.2GetOrder].6.Check response Schema contain property status', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('status');  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[2.2GetOrder].7.Check response Schema contain property complete', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('complete');  \r",
									"});\r",
									"//check pet id--------------------------------------------------------------------------------------\r",
									"pm.test(\"[2.Store].[2.2GetOrder].8.Check pet id is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).petId).to.be.a('number');\r",
									"});    \r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].9.Check pet id greaterThan 13  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.be.greaterThan(13);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].10.Check pet id not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check id---------------------------------------------------------------------------------------------\r",
									"pm.test(\"[2.Store].[2.2GetOrder].11.Check id is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).id).to.be.a('number');\r",
									"});    \r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].12.Check id greaterThan 13  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.greaterThan(13);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].13.Check id not contain letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check quantity------------------------------------------------------------------------------------\r",
									"pm.test(\"[2.Store].[2.2GetOrder].14.Check quantity is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).quantity).to.be.a('number');\r",
									"});    \r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].15.Check quantity equal 2 digits  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).quantity.toString()).to.match(/^\\d{2}$/);;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].16.Check quantity not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check responses not null ---------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[2.2GetOrder].17.Check ID not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].18.Check petId not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].19.Check quantity not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].20.Check shipDate not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].21.Check status not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null);\r",
									"}); \r",
									"\r",
									"pm.test(\"[2.Store].[2.2GetOrder].22.Check complete not null\",function (){\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.equal(null);\r",
									"}); \r",
									"//check status----------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[2.2GetOrder].23.Check status not contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(Number);\r",
									"});\r",
									"\r",
									"pm.test('[2.Store].[2.2GetOrder].24.Check status response', function (){\r",
									"  pm.expect(JSON.parse(responseBody).status).to.be.oneOf(['sold', 'commingsoon', 'placed']);\r",
									"});\r",
									"//check shipdate--------------------------------------------------------------------------------------\r",
									"function formatDateTime(dtStr) {\r",
									"  const dt = new Date(dtStr);\r",
									"  return dt.toISOString().substring(0, 10) + 'T00:00:00';\r",
									"}\r",
									"pm.test(\"[2-store].[2.2GetOrder].25-Actual and Expected Results:Check shipDate value is \"+formatDateTime(pm.response.json().shipDate),function(){\r",
									"    pm.expect(formatDateTime(pm.response.json().shipDate)).to.be.equal(formatDateTime(pm.response.json().shipDate));\r",
									"});\r",
									"//check boolean---------------------------------------------------------------------------------------\r",
									"pm.test(\"[2-store].[2.2GetOrder].26-Check Complete true or false\" , function(){\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.be.a('boolean')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/store/order/{{orderid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{orderid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3StoreQuantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check response Body\r",
									"pm.test('[2.Store][2.3Store Quantity].1.Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');});\r",
									"//Check Schema property------------------------------------------------------------------------------\r",
									" pm.test('[2.Store][2.3Store Quantity].2.Check response Schema contain property Sold', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('sold');  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].3.Check response Schema contain property unknow', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('unknow');  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].4.Check response Schema contain property asd', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('asd');  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].5.Check response Schema contain property string', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('string');  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].6.Check response Schema contain property unavailable', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('unavailable');  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].7.Check response Schema contain property pending', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('pending');  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].8.Check response Schema contain property available', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('available');  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].9.Check response Schema contain property awaiable', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('awaiable');  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].10.Check response Schema contain property peric', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('peric');  \r",
									"});   \r",
									"   \r",
									"//Check responses not null---------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].11.Check response Sold not null', function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.not.equal(null);  \r",
									"});   \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].12.Check response unknow not null', function () {\r",
									"    pm.expect(JSON.parse(responseBody).unknow).to.not.equal(null);  \r",
									"});  \r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].13.Check response asd not null', function () {\r",
									"    pm.expect(JSON.parse(responseBody).asd).to.not.equal(null);  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].14.Check response string not null', function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.equal(null);  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].15.Check response unavailable not null', function () {\r",
									"    pm.expect(JSON.parse(responseBody).unavailable).to.not.equal(null);  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].16.Check response available not null', function () {\r",
									"    pm.expect(JSON.parse(responseBody).available).to.not.equal(null);  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].17.Check response awaiable not null', function () {\r",
									"    pm.expect(JSON.parse(responseBody).awaiable).to.not.equal(null);  \r",
									"});\r",
									"\r",
									"pm.test('[2.Store][2.3Store Quantity].18.Check response peric not null', function () {\r",
									"    pm.expect(JSON.parse(responseBody).peric).to.not.equal(null);  \r",
									"});\r",
									"//check sold ----------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].19.Check sold is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.be.a('Number')\r",
									"}\r",
									"\r",
									"pm.test(\"[2.Store].[2.3Store Quantity].20.Check sold  not contain letters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"//check know -----------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].21.Check unknow is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).unknow).to.be.a('Number')\r",
									"}\r",
									"\r",
									"pm.test(\"[2.Store].[2.3Store Quantity].22.Check unknow  not contain letters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).unknow).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check asd------------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].23.Check asd is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).asd).to.be.a('Number')\r",
									"}\r",
									"\r",
									"pm.test(\"[2.Store].[2.3Store Quantity].24.Check asd  not contain letters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).asd).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check string----------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].25.Check string is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).string).to.be.a('Number')\r",
									"}\r",
									"\r",
									"pm.test(\"[2.Store].[2.3Store Quantity].26.Check string  not contain letters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check unavailable-------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].27.Check unavailable is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).unavailable).to.be.a('Number')\r",
									"}\r",
									"\r",
									"pm.test(\"[2.Store].[2.3Store Quantity].28.Check unavailable  not contain letters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).unavailable).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check available---------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].29.Check available is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).available).to.be.a('Number')\r",
									"}\r",
									"\r",
									"pm.test(\"[2.Store].[2.3Store Quantity].30.Check available  not contain letters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).available).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check awaiable---------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].31.Check awaiable is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).awaiable).to.be.a('Number')\r",
									"}\r",
									"\r",
									"pm.test(\"[2.Store].[2.3Store Quantity].32.Check awaiable  not contain letters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).awaiable).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check peric-------------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store][2.3Store Quantity].33.Check peric is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).peric).to.be.a('Number')\r",
									"}\r",
									"\r",
									"pm.test(\"[2.Store].[2.3Store Quantity].34.Check peric  not contain letters\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).peric).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/store/inventory",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4DeleteOrderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"//Check response Schema--------------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"})\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"})\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"})\r",
									"//Check Message----------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].4.Check message greaterThan 13  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message.length).to.be.greaterThan(13);\r",
									"})\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].5.Check message contain letters  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.match(/[A-Za-z]/);\r",
									"})\r",
									"//Check response not null-----------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].6.Check code not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"});\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].7.Check type not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"});\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].8.Check message not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"});\r",
									"//Check Code------------------------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].9.Check code to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].10.Check awaiable is a number'), function(){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.a('Number')\r",
									"}\r",
									"//check responseBody an object--------------------------------------------------------------------------\r",
									"pm.test('[2.Store].[1.7 Delete(ID)].11.Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/store/order/{{orderid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{orderid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3.User",
			"item": [
				{
					"name": "3.1AddNewUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('username', JSON.parse(request.data).username);\r",
									"pm.collectionVariables.set('UserID', JSON.parse(responseBody).message);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response Schema----------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"});\r",
									"pm.test('[3.User].[3.1 Add New User].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"});\r",
									"pm.test('[3.User].[3.1 Add New User].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"});\r",
									"//Check Message------------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].4.Check message to contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/[0-9]/);\r",
									"});\r",
									"pm.test('[3.User].[3.1 Add New User].5.Check message greaterThan 2 digits', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message.length).to.be.greaterThan(2);\r",
									"});\r",
									"pm.test('[3.User].[3.1 Add New User].6.Check message not contain letters  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//Check response not null--------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].7.Check code not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.1 Add New User].8.Check type not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.1 Add New User].9.Check message not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"});\r",
									"//Check Code-----------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].10.Check code to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"pm.test('[3.User].[3.1 Add New User].11.Check code is a number', function(){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.a('Number');\r",
									"});\r",
									"//check type is a string---------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].12.Check type is a number', function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.be.a('string');\r",
									"});\r",
									"//Check request body property-----------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].13.check request body contains id', function () {\r",
									" pm.expect(JSON.parse(request.data)).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].14.Check id is a string', function () {\r",
									" pm.expect(JSON.parse(request.data).id).to.be.a('string');\r",
									"});\r",
									"//Username--------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].15.Check request body contains username', function () {\r",
									" pm.expect(JSON.parse(request.data)).to.have.property('username');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].16.Check request body username is a string', function () {\r",
									" pm.expect(JSON.parse(request.data).username).to.be.a('string');\r",
									"});\r",
									"//FirstName-------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].17.Check request body contains firstName', function () {\r",
									" pm.expect(JSON.parse(request.data)).to.have.property('firstName');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].18.Check request body firstName is a string', function () {\r",
									" pm.expect(JSON.parse(request.data).firstName).to.be.a('string');\r",
									"});\r",
									"//lastName--------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].19.Check request body contains lastName', function () {\r",
									" pm.expect(JSON.parse(request.data)).to.have.property('firstName');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].20.Check request body lastName is a string', function () {\r",
									" pm.expect(JSON.parse(request.data).lastName).to.be.a('string');\r",
									"});\r",
									"//EMail----------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].21.Check request body contains email', function () {\r",
									" pm.expect(JSON.parse(request.data)).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].22.Check request body email is a string', function () {\r",
									" pm.expect(JSON.parse(request.data).email).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].23.Check request body email matches special characters', function () {\r",
									" pm.expect(JSON.parse(request.data).email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"});\r",
									"//check password--------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].24.Check request body contains password', function () {\r",
									" pm.expect(JSON.parse(request.data)).to.have.property('password');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].25.Check request body password is a string', function () {\r",
									" pm.expect(JSON.parse(request.data).password).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].26.Check request body password matches special characters', function () {\r",
									" pm.expect(JSON.parse(request.data).password).to.match(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/);\r",
									"});\r",
									"//check phone-----------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].27.Check request body contains phone', function () {\r",
									" pm.expect(JSON.parse(request.data)).to.have.property('phone');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].28.Check request body phone is a string', function () {\r",
									" pm.expect(JSON.parse(request.data).phone).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].29.Check request body phone matches special characters', function () {\r",
									" pm.expect(JSON.parse(request.data).phone).to.match(/^\\+?([0-9]{1,3})?[-. ]?([0-9]{1,4})?[-. ]?([0-9]{1,9})$/);\r",
									"});\r",
									"//Check userStatus---------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.1 Add New User].30.Check request body contains userStatus', function () {\r",
									" pm.expect(JSON.parse(request.data)).to.have.property('userStatus');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].31.Check request body userStatus is a string', function () {\r",
									" pm.expect(JSON.parse(request.data).userStatus).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.1 Add New User].32.Check request body userStatus matches special characters', function () {\r",
									" pm.expect(JSON.parse(request.data).userStatus).to.match(/^\\d{3}$/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomName() {\r",
									"    var length = Math.floor(Math.random() * 3) + 8;\r",
									"    var result = '';\r",
									"    var characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    var charactersLength = characters.length;\r",
									"    for ( var i = 0; i < length; i++ ) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"pm.collectionVariables.set(\"User\", generateRandomName());\r",
									"pm.collectionVariables.set(\"First\", generateRandomName());\r",
									"pm.collectionVariables.set(\"Last\", generateRandomName());\r",
									"\r",
									"function generateRandomId() {\r",
									" return Math.floor(Math.random() * 901) + 100;\r",
									"}\r",
									"pm.collectionVariables.set(\"UserID\",generateRandomId());\r",
									"pm.collectionVariables.set(\"UserSt\",generateRandomId());\r",
									"\r",
									"function generateRandomEmail() {\r",
									"    const name = Math.random().toString(36).substring(2, 12);\r",
									"    const domain = Math.random().toString(36).substring(2, 8);\r",
									"    const emailExtension = ['com', 'net', 'org'][Math.floor(Math.random() * 3)];\r",
									"    return name + '@' + domain + '.' + emailExtension;\r",
									"}\r",
									"pm.collectionVariables.set(\"Email\",generateRandomEmail());\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    const length = Math.floor(Math.random() * 8) + 8;\r",
									"    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=';\r",
									"    let password = '';\r",
									"    for (let i = 0, n = charset.length; i < length; ++i) {\r",
									"        password += charset.charAt(Math.floor(Math.random() * n));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"pm.collectionVariables.set(\"password\",generateRandomPassword());\r",
									"\r",
									"function generateRandomPhone() {\r",
									"    const length = 11;\r",
									"    const charset = '0123456789';\r",
									"    let phone = '';\r",
									"    for (let i = 0, n = charset.length; i < length; ++i) {\r",
									"        phone += charset.charAt(Math.floor(Math.random() * n));\r",
									"    }\r",
									"    return phone;\r",
									"}\r",
									"pm.collectionVariables.set(\"Phone\",generateRandomPhone());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{UserID}}\",\r\n  \"username\": \"{{User}}\",\r\n  \"firstName\": \"{{First}}\",\r\n  \"lastName\": \"{{Last}}\",\r\n  \"email\": \"{{Email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"phone\": \"{{Phone}}\",\r\n  \"userStatus\": \"{{UserSt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2Createwithlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Check response Schema-----------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.2 Create with list].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"})\r",
									"pm.test('[3.User].[3.2 Create with list].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"})\r",
									"pm.test('[3.User].[3.2 Create with list].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"})\r",
									"//Check Message------------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.2 Create with list].4.Check message to contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.equal('ok');\r",
									"});\r",
									"//Check response not null---------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.2 Create with list].5.Check code not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.2 Create with list].6.Check type not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.2 Create with list].7.Check message not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"});\r",
									"//Check Code-----------------------------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.2 Create with list].8.Check code to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check type is a string---------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.2 Create with list].12.Check type is a number', function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomName() {\r",
									"    var length = Math.floor(Math.random() * 3) + 8;\r",
									"    var result = '';\r",
									"    var characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    var charactersLength = characters.length;\r",
									"    for ( var i = 0; i < length; i++ ) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"pm.collectionVariables.set(\"Userwithlist\", generateRandomName());\r",
									"pm.collectionVariables.set(\"Firstwithlist\", generateRandomName());\r",
									"pm.collectionVariables.set(\"Lastwithlist\", generateRandomName());\r",
									"\r",
									"function generateRandomId() {\r",
									" return Math.floor(Math.random() * 901) + 100;\r",
									"}\r",
									"pm.collectionVariables.set(\"UserIDwithlist\",generateRandomId());\r",
									"pm.collectionVariables.set(\"UserStwithlist\",generateRandomId());\r",
									"\r",
									"function generateRandomEmail() {\r",
									"    const name = Math.random().toString(36).substring(2, 12);\r",
									"    const domain = Math.random().toString(36).substring(2, 8);\r",
									"    const emailExtension = ['com', 'net', 'org'][Math.floor(Math.random() * 3)];\r",
									"    return name + '@' + domain + '.' + emailExtension;\r",
									"}\r",
									"pm.collectionVariables.set(\"Emailwithlist\",generateRandomEmail());\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    const length = Math.floor(Math.random() * 8) + 8;\r",
									"    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=';\r",
									"    let password = '';\r",
									"    for (let i = 0, n = charset.length; i < length; ++i) {\r",
									"        password += charset.charAt(Math.floor(Math.random() * n));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"pm.collectionVariables.set(\"passwordwithlist\",generateRandomPassword());\r",
									"\r",
									"function generateRandomPhone() {\r",
									"    const length = 11;\r",
									"    const charset = '0123456789';\r",
									"    let phone = '';\r",
									"    for (let i = 0, n = charset.length; i < length; ++i) {\r",
									"        phone += charset.charAt(Math.floor(Math.random() * n));\r",
									"    }\r",
									"    return phone;\r",
									"}\r",
									"pm.collectionVariables.set(\"Phonewithlist\",generateRandomPhone());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": {{UserIDwithlist}},\r\n    \"username\": \"{{Userwithlist}}\",\r\n    \"firstName\": \"{{Firstwithlist}}\",\r\n    \"lastName\": \"{{Lastwithlist}}\",\r\n    \"email\": \"{{Emailwithlist}}\",\r\n    \"password\": \"{{passwordwithlist}}\",\r\n    \"phone\": \"{{Phonewithlist}}\",\r\n    \"userStatus\": \"{{UserStwithlist}}\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/createWithList",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3CreatewithArray",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Check response Schema\r",
									"pm.test('[3.User].[3.3 Create with Array].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"})\r",
									"pm.test('[3.User].[3.3 Create with Array].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"})\r",
									"pm.test('[3.User].[3.3 Create with Array].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"})\r",
									"//Check Message\r",
									"pm.test('[3.User].[3.3 Create with Array].4.Check message to contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.equal('ok');\r",
									"});\r",
									"//Check response not null\r",
									"pm.test('[3.User].[3.3 Create with Array].5.Check code not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.3 Create with Array].6.Check type not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.3 Create with Array].7.Check message not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"});\r",
									"//Check Code\r",
									"pm.test('[3.User].[3.3 Create with Array].8.Check code to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//check type is a string---------------------------------------------------------------------\r",
									"pm.test('[3.User].[3.3 Create with Array].9.Check type is a number', function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomName() {\r",
									"    var length = Math.floor(Math.random() * 3) + 8;\r",
									"    var result = '';\r",
									"    var characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    var charactersLength = characters.length;\r",
									"    for ( var i = 0; i < length; i++ ) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"pm.collectionVariables.set(\"Userwitharray\", generateRandomName());\r",
									"pm.collectionVariables.set(\"Firstwitharray\", generateRandomName());\r",
									"pm.collectionVariables.set(\"Lastwitharray\", generateRandomName());\r",
									"\r",
									"function generateRandomId() {\r",
									" return Math.floor(Math.random() * 901) + 100;\r",
									"}\r",
									"pm.collectionVariables.set(\"UserIDwitharray\",generateRandomId());\r",
									"pm.collectionVariables.set(\"UserStwitharray\",generateRandomId());\r",
									"\r",
									"function generateRandomEmail() {\r",
									"    const name = Math.random().toString(36).substring(2, 12);\r",
									"    const domain = Math.random().toString(36).substring(2, 8);\r",
									"    const emailExtension = ['com', 'net', 'org'][Math.floor(Math.random() * 3)];\r",
									"    return name + '@' + domain + '.' + emailExtension;\r",
									"}\r",
									"pm.collectionVariables.set(\"Emailwitharray\",generateRandomEmail());\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    const length = Math.floor(Math.random() * 8) + 8;\r",
									"    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=';\r",
									"    let password = '';\r",
									"    for (let i = 0, n = charset.length; i < length; ++i) {\r",
									"        password += charset.charAt(Math.floor(Math.random() * n));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"pm.collectionVariables.set(\"passwordwitharray\",generateRandomPassword());\r",
									"\r",
									"function generateRandomPhone() {\r",
									"    const length = 11;\r",
									"    const charset = '0123456789';\r",
									"    let phone = '';\r",
									"    for (let i = 0, n = charset.length; i < length; ++i) {\r",
									"        phone += charset.charAt(Math.floor(Math.random() * n));\r",
									"    }\r",
									"    return phone;\r",
									"}\r",
									"pm.collectionVariables.set(\"Phonewitharray\",generateRandomPhone());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": {{UserIDwitharray}},\r\n    \"username\": \"{{Userwitharray}}\",\r\n    \"firstName\": \"{{Firstwitharray}}\",\r\n    \"lastName\": \"{{Lastwitharray}}\",\r\n    \"email\": \"{{Emailwitharray}}\",\r\n    \"password\": \"{{passwordwitharray}}\",\r\n    \"phone\": \"{{Phonewitharray}}\",\r\n    \"userStatus\": \"{{UserStwitharray}}\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/createWithArray",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4FindByUserName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.4 Get User By UserName].1.Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].2.Check response Schema contain property id', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('id');  \r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].3.Check response Schema contain username', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('username');  \r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].4.Check response Schema contain property firstName', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('firstName');  \r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].5.Check response Schema contain property lastName', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('lastName');  \r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].6.Check response Schema contain property email', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('email');  \r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].7.Check response Schema contain property password', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('password');  \r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].8.Check response Schema contain property phone', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('phone');  \r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].9.Check response Schema contain property userStatus', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('userStatus');  \r",
									"});\r",
									"\r",
									"pm.test(\"[3.User].[3.4 Get User By UserName].10.Check userStatus is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).userStatus).to.be.a('number');\r",
									"});    \r",
									"pm.test(\"[3.User].[3.4 Get User By UserName].11.Check userStatus greaterThan 2  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.be.greaterThan(2);\r",
									"});\r",
									"pm.test(\"[3.User].[3.4 Get User By UserName].12.Check userStatus not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.User].[3.4 Get User By UserName].13.Check id is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).id).to.be.a('number');\r",
									"});    \r",
									"pm.test(\"[3.User].[3.4 Get User By UserName].14.Check id greaterThan 2  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.greaterThan(2);\r",
									"});\r",
									"pm.test(\"[3.User].[3.4 Get User By UserName].15.Check id not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.User].[3.4 Get User By UserName].16.Check phone is a number \",function(){\r",
									"     pm.expect(JSON.parse(responseBody).phone).to.match(/[0-9]/);\r",
									"});    \r",
									"pm.test(\"[3.User].[3.4 Get User By UserName].17.Check phone not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"pm.test(\"[2.Store].[1.1AddNewStore].18.Check phone match 11  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).phone.toString()).to.match(/^\\d{11}$/);;\r",
									"})\r",
									"\r",
									"pm.test('[3.User].[3.4 Get User By UserName].19.Check Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].20.Check Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).username.length).to.be.within(8 ,10);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].21.Check Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).username)).to.be.a('string');\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].22.Check Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).username).to.match(/[a-z]/);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].23.Check Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.4 Get User By UserName].24.Check firstName not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].25.Check firstName lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).firstName.length).to.be.within(8 ,10);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].26.Check firstName to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).firstName)).to.be.a('string');\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].27.Check firstName to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.match(/[a-z]/);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].28.Check firstName to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.4 Get User By UserName].29.Check lastName not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].30.Check lastName lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).lastName.length).to.be.within(8 ,10);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].31.Check lastName to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).lastName)).to.be.a('string');\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].32.Check lastName to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.match(/[a-z]/);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].33.Check lastName to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.match(/[0-9A-Z]/);\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.4 Get User By UserName].34.Check email ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).email).to.match(/[0-9A-Za-z][@]/);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].35.Check email to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).email)).to.be.a('string');\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].36.Check email not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('[3.User].[3.4 Get User By UserName].37.Check password ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).password).to.match(/[0-9A-Za-z][!@#$%^&*]/);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].38.Check password not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.4 Get User By UserName].39.Check password lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).password.length).to.be.within(8 ,15);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/{{username}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5GetUserLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][[3.5Login]1- Status code is 2oo\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][[3.7Login]2- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.7Login]3- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.7Login]4- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value is 1 \r",
									"pm.test(\"[3.User][3.7Login5-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.7Login]6-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.7Login]7-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.7Login]8- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.7Login]9- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.7Login]10- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[3.User][3.7Login]11-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.7Login]12-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.7Login]13- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.7Login]14- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.7Login]15- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//check message value is contain \"user session\"\r",
									"pm.test(\"[3.User][3.7Login]16- Check message conaton user id  \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.contains(\"user session\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/login?username={{User}}&password={{password}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{User}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.6LogOutCurrentLoggedSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][[3.5Login]1- Status code is 2oo\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][[3.6Logout]2- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.6Logout]3- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.6Logout]4- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value is 1 \r",
									"pm.test(\"[3.User][3.6Logout5-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.6Logout]6-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.6Logout]7-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.6Logout]8- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.6Logout]9- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.6Logout]10- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[3.User][3.6Logout]11-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.6Logout]12-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.6Logout]13- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.6Logout]14- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.6Logout]15- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//check message value is contain \"user session\"\r",
									"pm.test(\"[3.User][3.6Logout]16- Check message conaton user id  \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.contains(\"ok\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/user/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.7UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.set('UserID',JSON.parse(responseBody).message);\r",
									"\r",
									"//Check response Schema\r",
									"pm.test('[3.User].[3.7 Update User].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"})\r",
									"pm.test('[3.User].[3.7 Update User].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"})\r",
									"pm.test('[3.User].[3.7 Update User].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"})\r",
									"//Check Message\r",
									"pm.test('[3.User].[3.7 Update User].4.Check message to contain numbers', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/[0-9]/);\r",
									"});\r",
									"pm.test('[3.User].[3.7 Update User].5.Check message greaterThan 13  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message.length).to.be.greaterThan(13);\r",
									"})\r",
									"pm.test('[3.User].[3.7 Update User].6.Check message not contail letters  ', function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.match(/[A-Za-z]/);\r",
									"})\r",
									"//Check response not null\r",
									"pm.test('[3.User].[3.7 Update User].7.Check code not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.7 Update User].8.Check type not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.User].[3.7 Update User].9.Check message not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"});\r",
									"//Check Code\r",
									"pm.test('[3.User].[3.7 Update User].10.Check code to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomName() {\r",
									"    var length = Math.floor(Math.random() * 3) + 8;\r",
									"    var result = '';\r",
									"    var characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    var charactersLength = characters.length;\r",
									"    for ( var i = 0; i < length; i++ ) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_UP\", generateRandomName());\r",
									"pm.collectionVariables.set(\"First_UP\", generateRandomName());\r",
									"pm.collectionVariables.set(\"Last_UP\", generateRandomName());\r",
									"\r",
									"function generateRandomId() {\r",
									" return Math.floor(Math.random() * 901) + 100;\r",
									"}\r",
									"pm.collectionVariables.set(\"UserID_UP\",generateRandomId());\r",
									"pm.collectionVariables.set(\"UserSt_UP\",generateRandomId());\r",
									"\r",
									"function generateRandomEmail() {\r",
									"    const name = Math.random().toString(36).substring(2, 12);\r",
									"    const domain = Math.random().toString(36).substring(2, 8);\r",
									"    const emailExtension = ['com', 'net', 'org'][Math.floor(Math.random() * 3)];\r",
									"    return name + '@' + domain + '.' + emailExtension;\r",
									"}\r",
									"pm.collectionVariables.set(\"Email_UP\",generateRandomEmail());\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    const length = Math.floor(Math.random() * 8) + 8;\r",
									"    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=';\r",
									"    let password = '';\r",
									"    for (let i = 0, n = charset.length; i < length; ++i) {\r",
									"        password += charset.charAt(Math.floor(Math.random() * n));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"pm.collectionVariables.set(\"password_UP\",generateRandomPassword());\r",
									"\r",
									"function generateRandomPhone() {\r",
									"    const length = 11;\r",
									"    const charset = '0123456789';\r",
									"    let phone = '';\r",
									"    for (let i = 0, n = charset.length; i < length; ++i) {\r",
									"        phone += charset.charAt(Math.floor(Math.random() * n));\r",
									"    }\r",
									"    return phone;\r",
									"}\r",
									"pm.collectionVariables.set(\"Phone_UP\",generateRandomPhone());\r",
									"\r",
									"function randomStatus() {\r",
									"    var status = ['login', 'logout'];\r",
									"    var randomIndex = Math.floor(Math.random() * status.length);\r",
									"\r",
									"    return status[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"userstatus\",randomStatus())\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{UserID_UP}},\r\n  \"username\": \"{{User_UP}}\",\r\n  \"firstName\": \"{{First_UP}}\",\r\n  \"lastName\": \"{{Last_UP}}\",\r\n  \"email\": \"{{Email_UP}}\",\r\n  \"password\": \"{{password_UP}}\",\r\n  \"phone\": \"{{Phone_UP}}\",\r\n  \"userStatus\": \"{{UserSt_UP}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/{{User}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{User}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.8DeleteUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"//Check response Schema\r",
									"pm.test('[3.USER].[3.8 Delete(user)].1.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('message');\r",
									"})\r",
									"pm.test('[3.USER].[3.8 Delete(user)].2.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('type');\r",
									"})\r",
									"pm.test('[3.USER].[3.8 Delete(user)].3.Check response Schema contain property', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('code');\r",
									"})\r",
									"//Check Message\r",
									"pm.test('[3.USER].[3.8 Delete(user)].4.Check message to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).message)).to.be.a('string');\r",
									"});\r",
									"\r",
									"//Check response not null\r",
									"pm.test('[3.USER].[3.8 Delete(user)].5.Check code not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.USER].[3.8 Delete(user)].6.Check type not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null);\r",
									"});\r",
									"pm.test('[3.USER].[3.8 Delete(user)].7.Check message not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null);\r",
									"});\r",
									"//Check Code\r",
									"pm.test('[3.USER].[3.8 Delete(user)].8.Check code to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.match(/[A-Za-z]/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/{{User}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{User}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CTID",
			"value": 597
		},
		{
			"key": "TAGID",
			"value": 244
		},
		{
			"key": "CTNAME",
			"value": "jlexicwzsr"
		},
		{
			"key": "PHNAME",
			"value": "qdhupccw"
		},
		{
			"key": "TAGNAME",
			"value": "xoxpmqphb"
		},
		{
			"key": "status",
			"value": "pending"
		},
		{
			"key": "rphoto",
			"value": "https://i.imgur.com/Xz223S9.png"
		},
		{
			"key": "name",
			"value": "qdhupccw"
		},
		{
			"key": "NameUpdate",
			"value": "mUEMcXuC"
		},
		{
			"key": "StatusUpdate",
			"value": "unavailable"
		},
		{
			"key": "CTID_update",
			"value": 630
		},
		{
			"key": "TAGID_update",
			"value": 740
		},
		{
			"key": "status_update",
			"value": "pending"
		},
		{
			"key": "CATName_update",
			"value": "ayihqgpg"
		},
		{
			"key": "TagName_update",
			"value": "hexysqvadr"
		},
		{
			"key": "DogName_update",
			"value": "mjjfclhz"
		},
		{
			"key": "URLS_update",
			"value": "https://picsum.photos/569/478"
		},
		{
			"key": "quantity",
			"value": 50
		},
		{
			"key": "shipdate",
			"value": "2024-07-02T02:30:04.702Z"
		},
		{
			"key": "orderstatus",
			"value": "placed"
		},
		{
			"key": "Complete",
			"value": true
		},
		{
			"key": "orderid",
			"value": 4937477938824526000
		},
		{
			"key": "User",
			"value": "mvgwmkwprd"
		},
		{
			"key": "First",
			"value": "qojrihif"
		},
		{
			"key": "Last",
			"value": "tskprdiap"
		},
		{
			"key": "UserID",
			"value": "453"
		},
		{
			"key": "UserSt",
			"value": 953
		},
		{
			"key": "Email",
			"value": "t6s75lesnl@p537wn.org"
		},
		{
			"key": "password",
			"value": "LiC>d6*/8"
		},
		{
			"key": "Phone",
			"value": "53157710981"
		},
		{
			"key": "username",
			"value": "mvgwmkwprd"
		},
		{
			"key": "Userwithlist",
			"value": "ldibzogjsc"
		},
		{
			"key": "Firstwithlist",
			"value": "yifrmynl"
		},
		{
			"key": "Lastwithlist",
			"value": "ywzpvpyjgm"
		},
		{
			"key": "UserIDwithlist",
			"value": 968
		},
		{
			"key": "UserStwithlist",
			"value": 110
		},
		{
			"key": "Emailwithlist",
			"value": "x2a6ht2m0s@7jnvgw.com"
		},
		{
			"key": "passwordwithlist",
			"value": ",)kGD.*b:"
		},
		{
			"key": "Phonewithlist",
			"value": "72054829862"
		},
		{
			"key": "Userwitharray",
			"value": "tjrsrjhh"
		},
		{
			"key": "Firstwitharray",
			"value": "iqohmoaeu"
		},
		{
			"key": "Lastwitharray",
			"value": "lyrkuvmbk"
		},
		{
			"key": "UserIDwitharray",
			"value": 678
		},
		{
			"key": "UserStwitharray",
			"value": 585
		},
		{
			"key": "Emailwitharray",
			"value": "f0q18v1770@ygpwm1.net"
		},
		{
			"key": "passwordwitharray",
			"value": "=Qt/hvM(Z@"
		},
		{
			"key": "Phonewitharray",
			"value": "41855224532"
		},
		{
			"key": "User_UP",
			"value": "lznyzmmfma"
		},
		{
			"key": "First_UP",
			"value": "ahobbedmi"
		},
		{
			"key": "Last_UP",
			"value": "qkdwnjjizf"
		},
		{
			"key": "UserID_UP",
			"value": 453
		},
		{
			"key": "UserSt_UP",
			"value": 915
		},
		{
			"key": "Email_UP",
			"value": "7r27uq3gvp@z0pkg5.com"
		},
		{
			"key": "password_UP",
			"value": "I#;>I}Mkl{m-R"
		},
		{
			"key": "Phone_UP",
			"value": "17409438503"
		},
		{
			"key": "userstatus",
			"value": "login"
		}
	]
}